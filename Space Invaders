import pygame 

pygame.init()
pygame.display.set_caption("Space Invaders")
screen = pygame.display.set_mode((800, 800))
clock = pygame.time.Clock()
gameover = False

xpos = 450
ypos = 770
xpos2 = 400
ypos2 = 770
xpos3 = 450
ypos3 = 730
xpos4 = 440
ypos4 = 730
moveLeft = False
moveRight = False
timer = 0;
shoot = True
class Wall:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.numHits = 0
        
    def draw(self):
        pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 30, 30))

class Bullet:
  def __init__(self, xpos, ypos):
    self.xpos = xpos
    self.ypos = ypos
    self.isAlive = False

  def move (self, xpos, ypos):
    if self.isAlive == True:
      self.ypos-=5
    if self.ypos < 0:
      self.isAlive = False
      self.xpos = xpos
      self.ypos = ypos

  def draw(self):
    pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 3, 20))

bullet = Bullet(xpos +28, ypos)

class Alien:
  def __init__(self, xpos, ypos):
    self.xpos = xpos
    self.ypos = ypos
    self.isAlive = True
    self.direction = 1
  def move(self, time):
    if time % 1000 == 0:
      self.ypos += 100
      self.direction *=-1
      return 0
    if time % 100 == 0:
      self.xpos+=50*self.direction
    return time

  def collide(self, BulletX, BulletY):
      if self.isAlive:
          if BulletX > self.xpos:
              if BulletX < self.xpos + 40:
                  if BulletY < self.ypos + 40:
                      if BulletY > self.ypos:
                          print("hit")
                          self.isAlive = False
                          return False
                        
      return True
  def draw(self):
    pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 20, 20))



armada = []
for i in range(4):
  for j in range(9):
    armada.append(Alien(j*30+50, i*50+50))
    
walls = []
for k in range(4):
    for i in range(2):
        for j in range (3):
            walls.append(Wall(j*30+200*k+50, i*30+600))
    
while not gameover:#--------------------------------------------
    clock.tick(60)
    timer += 1

#input section
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gameover = True

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_LEFT:
            moveLeft = True

    elif event.type == pygame.KEYUP:
        if event.key == pygame.K_LEFT:
            moveLeft = False
            
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_RIGHT:
            moveRight = True
            
    elif event.type == pygame.KEYUP:
        if event.key == pygame.K_RIGHT:
            moveRight = False
  

#physics section
    if moveLeft == True:
      vx =- 3
    else:
      vx = 0

    xpos += vx
    xpos2 += vx
    xpos3 += vx
    xpos4 += vx
    
    if moveRight == True:
        vx =+3
    else:
        vx = 0
    xpos += vx
    xpos2 += vx
    xpos3 += vx
    xpos4 += vx
    
    for i in range (len(armada)):
        timer = armada[i].move(timer)

    if shoot == True:
      bullet.isAlive = True

    if bullet.isAlive == True:
      bullet.move(xpos+28, ypos)
      if bullet.isAlive == True:
          
          for i in range(len(armada)):
              bullet.isAlive = armada[i].collide(bullet.xpos, bullet.ypos)
              if bullet.isAlive == False:
                  break

    else:
      bullet.xpos = xpos + 28
      bullet.ypos = ypos
      
                         
          
    #render  section
    screen.fill((0, 0, 0))
    for i in range (len(armada)):
      armada[i].draw()
      
    for j in range (len(walls)):
        walls[j].draw()
   
    
    pygame.draw.rect(screen, (250, 250, 250), (xpos, ypos, 60, 20))
    pygame.draw.rect(screen, (250, 250, 250), (xpos2, ypos2, 60, 20))
    pygame.draw.rect(screen, (250, 250, 250), (xpos3, ypos3, 20, 40))
    pygame.draw.rect(screen, (250, 250, 250), (xpos4, ypos4, 20, 40))
    pygame.display.flip()




